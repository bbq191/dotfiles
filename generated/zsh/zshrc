#!/bin/zsh
# 由 dotfiles 生成器生成的 ZSH 配置

# 基础环境变量

export EDITOR="code-insiders"

export BROWSER="brave"

export LANG="zh_CN.UTF-8"

export XDG_CONFIG_HOME="${HOME}/AppData/Local"


# 现代工具别名

if command -v eza > /dev/null; then
    
    alias ls='eza --color=auto --group-directories-first'
    
    alias ll='eza -l --color=auto --group-directories-first'
    
    alias la='eza -la --color=auto --group-directories-first'
    
    alias lt='eza --tree --color=auto'
    
fi

if command -v bat > /dev/null; then
    
    alias cat='bat'
    
    alias catn='bat --style=plain'
    
fi

if command -v rg > /dev/null; then
    
    alias grep='rg'
    
fi

if command -v fd > /dev/null; then
    
    alias find='fd'
    
fi

if command -v dust > /dev/null; then
    
    alias du='dust'
    
fi

if command -v duf > /dev/null; then
    
    alias df='duf'
    
fi

if command -v procs > /dev/null; then
    
    alias ps='procs'
    
fi

if command -v htop > /dev/null; then
    
    alias top='htop'
    
fi

if command -v zoxide > /dev/null; then
    
    alias cd='z'
    
fi


# 高级函数

# 创建目录并进入
mkcd() { mkdir -p "$1" && cd "$1"; }


# 智能提取各种压缩格式
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *.xz)        unxz "$1"        ;;
            *.lzma)      unlzma "$1"      ;;
            *)           echo "'$1' 无法被 extract() 提取" ;;
        esac
    else
        echo "'$1' 不是有效文件"
    fi
}


# 杀死占用指定端口的进程
killport() {
    if [ -z "$1" ]; then
        echo "用法: killport <端口号>"
        return 1
    fi
    lsof -ti:$1 | xargs kill -9
}


# 快速启动 HTTP 服务器
serve() {
    local port=${1:-8000}
    if command -v python > /dev/null; then
        python -m http.server "$port"
    elif command -v python3 > /dev/null; then
        python3 -m http.server "$port"
    else
        echo "需要安装 Python"
    fi
}


# 获取天气信息
weather() {
    local location=${1:-"Beijing"}
    curl -s "wttr.in/$location?lang=zh"
}


# 获取公网 IP 地址
myip() {
    curl -s ipinfo.io/ip
}


# 显示端口使用情况
ports() {
    netstat -tulanp
}


# 显示内存占用最高的进程
psmem() {
    ps aux | sort -nr -k 4 | head -10
}


# 显示 CPU 占用最高的进程
pscpu() {
    ps aux | sort -nr -k 3 | head -10
}


# 快速查找文件
findfile() {
    if command -v fd > /dev/null; then
        fd -t f "$1"
    else
        find . -name "*$1*" -type f 2>/dev/null
    fi
}


# 快速查找目录
finddir() {
    if command -v fd > /dev/null; then
        fd -t d "$1"
    else
        find . -name "*$1*" -type d 2>/dev/null
    fi
}


# 备份文件
backup() {
    cp "$1" "$1.bak.$(date +%Y%m%d_%H%M%S)"
}


# 清理已合并的 Git 分支
gitclean() {
    git branch --merged | grep -v '\*\|main\|master\|develop' | xargs -n 1 git branch -d
}


# 重新加载 shell 配置
reload() {
    source ~/.zshrc && echo "Zsh 配置已重新加载"
}


# 显示系统信息
sysinfo() {
    echo "=== 系统信息 ==="
    uname -a
    echo ""
    echo "=== 内存使用 ==="
    free -h
    echo ""
    echo "=== 磁盘使用 ==="
    df -h
}



# 外部工具初始化

command -v thefuck > /dev/null && eval "$(thefuck --alias)"

command -v gh_copilot > /dev/null && eval "$(gh copilot alias -- zsh)"

command -v fnm > /dev/null && eval "$(fnm env --use-on-cd)"

command -v zoxide > /dev/null && eval "$(zoxide init zsh)"

command -v starship > /dev/null && eval "$(starship init zsh)"

command -v atuin > /dev/null && eval "$(atuin init zsh)"


echo "🚀 ZSH 环境已加载 - dotfiles 系统"